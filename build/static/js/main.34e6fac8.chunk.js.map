{"version":3,"sources":["logo.svg","components/TwitMenu.js","components/Message.js","components/TwitFeed.js","components/SignIn.js","components/SignUp.js","components/WhatsOnYourMind.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TwitMenu","Menu","fixed","inverted","Container","Item","as","Link","to","header","Message","alert","name","this","props","text","date","Feed","Event","Label","image","Content","Summary","Date","Extra","Meta","Like","Icon","onClick","reportMsg","React","Component","TwitFeed","state","error","isLoaded","items","fetch","then","res","json","result","console","log","setState","messages","size","map","item","author_id","pub_date","SignIn","changeHandler","event","nam","target","val","value","sendToApi","data","username","password","method","headers","body","JSON","stringify","info","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","color","Form","Segment","stacked","Input","fluid","icon","iconPosition","placeholder","onChange","type","Button","href","SignUp","email","message","password2","WhatsOnYourMind","Group","widths","TextArea","id","label","PublicFeed","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,2JCgB5B,SAASC,IACpB,OACA,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAKI,KAAN,CAAYC,GAAIC,IAAMC,GAAG,IAAKC,QAAM,GAApC,YAGA,kBAACR,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAAMC,GAAG,WAAxB,mBACA,kBAACP,EAAA,EAAKI,KAAN,CAAYC,GAAIC,IAAMC,GAAG,WAAzB,WACA,kBAACP,EAAA,EAAKI,KAAN,CAAYC,GAAIC,IAAMC,GAAG,WAAzB,a,6DCSOE,E,oLA9BXC,MAAM,0C,+BAIN,IAAMC,EAAOC,KAAKC,MAAMF,KAClBG,EAAOF,KAAKC,MAAMC,KAClBC,EAAOH,KAAKC,MAAME,KACxB,OACE,kBAACC,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,MAAM,iEAClB,kBAACH,EAAA,EAAKI,QAAN,KACE,kBAACJ,EAAA,EAAKK,QAAN,KACE,2BAAIV,GADN,sBAEE,kBAACK,EAAA,EAAKM,KAAN,KAAYP,IAEd,kBAACC,EAAA,EAAKO,MAAN,CAAYT,MAAI,GACbA,GAEH,kBAACE,EAAA,EAAKQ,KAAN,KACE,kBAACR,EAAA,EAAKS,KAAN,KACE,kBAACC,EAAA,EAAD,CAAMf,KAAK,OAAOgB,QAASf,KAAKgB,oB,GAtBxBC,IAAMC,WCmDbC,E,YA/Cb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDmB,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALQ,E,iFAQI,IAAD,OACpBC,MAAM,6CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCC,QAAQC,IAAI,wBACZ,EAAKC,SAAS,CACZT,UAAU,EACVC,MAAOK,EAAOI,cAMlB,SAACX,GACC,EAAKU,SAAS,CACZT,UAAU,EACVD,UAEAQ,QAAQC,IAAI,0B,+BAIZ,IAAD,EAC4B9B,KAAKoB,MAAfG,GADlB,EACCF,MADD,EACQC,SADR,EACkBC,OACzB,OACE,kBAACnB,EAAA,EAAD,CAAM6B,KAAK,SACNV,EAAMW,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAASpC,KAAMoC,EAAKC,UACpBlC,KAAMiC,EAAKjC,KACXC,KAAMgC,EAAKE,mB,GAvCApB,IAAMC,W,8DCqEdoB,E,YArEb,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAORsC,cAAgB,SAACC,GACf,IAAIC,EAAMD,EAAME,OAAO3C,KACnB4C,EAAMH,EAAME,OAAOE,MACvB,EAAKb,SAAL,eAAgBU,EAAME,KAXL,EAcnBE,UAAY,WACV,IAAIC,EAAM,CAACC,SAAU,EAAK3B,MAAM2B,SAAUC,SAAU,EAAK5B,MAAM4B,UAC/DxB,MAAM,2CAA6C,CACjDyB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAEpBrB,MAAK,SAACG,GAAD,OAAYA,EAAOD,UACxBF,MAAK,SAAC6B,GACLzB,QAAQC,IAAIwB,OAvBhB,EAAKlC,MAAQ,CACX2B,SAAU,GACVC,SAAU,IAJK,E,sEA8BjB,OACE,kBAACO,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAWC,cAAc,UACjE,kBAACJ,EAAA,EAAKK,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAQrE,GAAG,KAAKsE,MAAM,OAAOP,UAAU,UAAvC,0BAGA,kBAACQ,EAAA,EAAD,CAAM/B,KAAK,SACT,kBAACgC,EAAA,EAAD,CAASC,SAAO,GACd,kBAACF,EAAA,EAAKG,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,iBACZxE,KAAK,WACLyE,SAAUxE,KAAKuC,gBAEjB,kBAACyB,EAAA,EAAKG,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZE,KAAK,WACL1E,KAAK,WACLyE,SAAUxE,KAAKuC,gBAGjB,kBAACmC,EAAA,EAAD,CAAQX,MAAM,OAAOK,OAAK,EAACnC,KAAK,QAAQlB,QAASf,KAAK6C,WAAtD,WAKJ,kBAAC,IAAD,mBACa,uBAAG8B,KAAK,WAAR,kB,GA/DF1D,IAAMC,WCqGZ0D,E,YApGb,WAAY3E,GAAQ,IAAD,8BACjB,4CAAMA,KASRsC,cAAgB,SAACC,GAEf,IAAIC,EAAMD,EAAME,OAAO3C,KACnB4C,EAAMH,EAAME,OAAOE,MACvB,EAAKb,SAAL,eAAgBU,EAAME,KAdL,EAiBnBE,UAAY,WACVhB,QAAQC,IAAI,EAAKV,OACjB,IAAI0B,EAAM,CAACC,SAAU,EAAK3B,MAAM2B,SACrBC,SAAU,EAAK5B,MAAM4B,SACrB6B,MAAO,EAAKzD,MAAMyD,OAC7BhD,QAAQC,IAAIgB,GACZtB,MAAM,8CAAgD,CACpDyB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAEpBrB,MAAK,SAACG,GAAD,OAAYA,EAAOD,UACxBF,MAAK,SAAC6B,GACLzB,QAAQC,IAAIwB,GACTA,EAAK1B,OACNC,QAAQC,IAAI,oBACLwB,EAAKwB,UACZjD,QAAQC,IAAI,mBACZD,QAAQC,IAAIwB,EAAKwB,cAnCvB,EAAK1D,MAAQ,CACX2B,SAAU,GACVC,SAAU,GACV+B,UAAW,GACXF,MAAO,IANQ,E,sEA2CjB,OACE,kBAACtB,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAWC,cAAc,UACjE,kBAACJ,EAAA,EAAKK,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAQrE,GAAG,KAAKsE,MAAM,OAAOP,UAAU,UAAvC,WAGA,kBAACQ,EAAA,EAAD,CAAM/B,KAAK,SACT,kBAACgC,EAAA,EAAD,CAASC,SAAO,GACd,kBAACF,EAAA,EAAKG,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZxE,KAAK,WACLyE,SAAUxE,KAAKuC,gBAEjB,kBAACyB,EAAA,EAAKG,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,iBACZxE,KAAK,QACLyE,SAAUxE,KAAKuC,gBAEjB,kBAACyB,EAAA,EAAKG,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZE,KAAK,WACL1E,KAAK,WACLyE,SAAUxE,KAAKuC,gBAEjB,kBAACyB,EAAA,EAAKG,MAAN,CACEC,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,kBACZE,KAAK,WACL1E,KAAK,YACLyE,SAAUxE,KAAKuC,gBAGjB,kBAACmC,EAAA,EAAD,CAAQX,MAAM,OAAOK,OAAK,EAACnC,KAAK,QAAQlB,QAASf,KAAK6C,WAAtD,aAKJ,kBAAC,IAAD,0BACoB,uBAAG8B,KAAK,WAAR,kB,GA7FT1D,IAAMC,WCgDZ8D,E,YA/Cb,WAAY/E,GAAQ,IAAD,8BACjB,4CAAMA,KAMRsC,cAAgB,SAACC,GACf,IAAIC,EAAMD,EAAME,OAAO3C,KACnB4C,EAAMH,EAAME,OAAOE,MACvB,EAAKb,SAAL,eAAgBU,EAAME,KAVL,EAanBE,UAAY,WACV,IAAIC,EAAM,CAAC5C,KAAM,EAAKkB,MAAMlB,MAC5BsB,MAAM,iDAAmD,CACvDyB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KAEpBrB,MAAK,SAACG,GAAD,OAAYA,EAAOD,UACxBF,MAAK,SAAC6B,GACLzB,QAAQC,IAAIwB,OAtBhB,EAAKlC,MAAQ,CACXlB,KAAM,IAHS,E,sEA6BjB,OACE,kBAAC+D,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKiB,MAAN,CAAYC,OAAO,SACjB,kBAAClB,EAAA,EAAKmB,SAAN,CACEC,GAAG,gCACHC,MAAM,uBACNd,YAAY,cACVxE,KAAK,OACLyE,SAAUxE,KAAKuC,iBAGrB,kBAACmC,EAAA,EAAD,CAAQD,KAAK,SAAS1D,QAASf,KAAK6C,WAApC,gB,GA1CoB5B,IAAMC,W,QCuEpC,IAAMoE,EAAa,kBACjB,6BAEE,kBAAC/F,EAAA,EAAD,CAAWW,MAAI,EAACuD,MAAO,CAAE8B,UAAW,QAClC,kBAAC,EAAD,MACA,kBAACzB,EAAA,EAAD,CAAQrE,GAAG,MAAX,eACA,kBAAC,EAAD,SCrEc+F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFiCD,WACb,OACE,kBAAC,IAAD,KACA,kBAAC3G,EAAD,MASI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4G,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,WExDI,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdC,OAAM,SAAAnF,GACLQ,QAAQR,MAAMA,EAAMyD,c","file":"static/js/main.34e6fac8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\nimport React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Container,\r\n  Divider,\r\n  Dropdown,\r\n  Grid,\r\n  Header,\r\n  Image,\r\n  List,\r\n  Menu,\r\n  Segment,\r\n} from 'semantic-ui-react'\r\n\r\nexport default function TwitMenu() {\r\n    return (\r\n    <Menu fixed='top' inverted>\r\n      <Container>\r\n        <Menu.Item  as={Link} to=\"/\"  header>\r\n          MiniTwit\r\n        </Menu.Item>\r\n        <Menu.Item as={Link} to=\"/public\" >Public Timeline</Menu.Item>\r\n        <Menu.Item  as={Link} to=\"/signup\" >Sign Up</Menu.Item>\r\n        <Menu.Item  as={Link} to=\"/signin\" >Sign In</Menu.Item>\r\n\r\n      </Container>\r\n    </Menu>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Feed, Icon } from 'semantic-ui-react'\r\nclass Message extends React.Component {\r\n  reportMsg() {\r\n    alert(\"Do you want to report this message ?\")\r\n   \r\n  }\r\n  render (){\r\n    const name = this.props.name\r\n    const text = this.props.text\r\n    const date = this.props.date\r\n    return (\r\n      <Feed.Event>\r\n        <Feed.Label image='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n        <Feed.Content>\r\n          <Feed.Summary>\r\n            <a>{name}</a> posted on his page\r\n            <Feed.Date>{date}</Feed.Date>\r\n          </Feed.Summary>\r\n          <Feed.Extra text>\r\n            {text}\r\n          </Feed.Extra>\r\n          <Feed.Meta>\r\n            <Feed.Like>\r\n              <Icon name='flag' onClick={this.reportMsg}/>\r\n            </Feed.Like>\r\n          </Feed.Meta>\r\n        </Feed.Content>\r\n      </Feed.Event>\r\n\r\n    )\r\n  }\r\n\r\n}\r\nexport default Message\r\n","import React from 'react'\r\nimport { Feed, Icon } from 'semantic-ui-react'\r\nimport Message from './Message'\r\n\r\n// const TwitFeed = () => (\r\nclass TwitFeed extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n    componentDidMount() {\r\n    fetch(\"https://minitwit-api.herokuapp.com/public\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(\"success fetching api\")\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.messages\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n            console.log(\"fail fetching api\")\r\n        }\r\n      )\r\n  }\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n    return (\r\n      <Feed size=\"large\">\r\n          {items.map(item => (\r\n            <Message name={item.author_id}\r\n            text={item.text}\r\n            date={item.pub_date}/>\r\n          ))}\r\n      </Feed>\r\n\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default TwitFeed\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  changeHandler = (event) => {\r\n    let nam = event.target.name\r\n    let val = event.target.value\r\n    this.setState({[nam]: val})\r\n  }\r\n\r\n  sendToApi = () => {\r\n    let data ={username: this.state.username, password: this.state.password,}\r\n    fetch('https://minitwit-api.herokuapp.com/login' , {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then((result) => result.json())\r\n      .then((info) => {\r\n        console.log(info)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as='h2' color='teal' textAlign='center'>\r\n            Log-in to your account\r\n          </Header>\r\n          <Form size='large'>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                fluid\r\n                icon='user'\r\n                iconPosition='left'\r\n                placeholder='E-mail address'\r\n                name='username'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Password'\r\n                type='password'\r\n                name='password'\r\n                onChange={this.changeHandler}\r\n              />\r\n\r\n              <Button color='teal' fluid size='large' onClick={this.sendToApi} >\r\n                Login\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            New to us? <a href='/signup'>Sign Up</a>\r\n          </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\nexport default SignIn\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\r\n\r\nclass SignUp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      password2: '',\r\n      email: ''\r\n    };\r\n  }\r\n\r\n  changeHandler = (event) => {\r\n    // https://www.w3schools.com/react/react_forms.asp\r\n    let nam = event.target.name\r\n    let val = event.target.value\r\n    this.setState({[nam]: val})\r\n  }\r\n\r\n  sendToApi = () => {\r\n    console.log(this.state)\r\n    let data ={username: this.state.username,\r\n               password: this.state.password,\r\n               email: this.state.email}\r\n    console.log(data)\r\n    fetch('https://minitwit-api.herokuapp.com/register' , {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then((result) => result.json())\r\n      .then((info) => {\r\n        console.log(info)\r\n        if(info.result){\r\n          console.log(\"success register\")\r\n        }else if(info.message){\r\n          console.log(\"failed register\")\r\n          console.log(info.message)\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as='h2' color='teal' textAlign='center'>\r\n            Sign up\r\n          </Header>\r\n          <Form size='large'>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                fluid\r\n                icon='user'\r\n                iconPosition='left'\r\n                placeholder='Username'\r\n                name='username'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='user'\r\n                iconPosition='left'\r\n                placeholder='E-mail address'\r\n                name='email'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Password'\r\n                type='password'\r\n                name='password'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Repeat password'\r\n                type='password'\r\n                name='password2'\r\n                onChange={this.changeHandler}\r\n              />\r\n\r\n              <Button color='teal' fluid size='large' onClick={this.sendToApi} >\r\n                Sign Up\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            Already a member? <a href='/signin'>Sign In</a>\r\n          </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SignUp\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react'\r\n\r\nclass WhatsOnYourMind extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n    };\r\n  }\r\n\r\n  changeHandler = (event) => {\r\n    let nam = event.target.name\r\n    let val = event.target.value\r\n    this.setState({[nam]: val})\r\n  }\r\n\r\n  sendToApi = () => {\r\n    let data ={text: this.state.text}\r\n    fetch('https://minitwit-api.herokuapp.com/add_message' , {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then((result) => result.json())\r\n      .then((info) => {\r\n        console.log(info)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment >\r\n        <Form >\r\n          <Form.Group widths='equal'>\r\n            <Form.TextArea\r\n              id='form-textarea-control-opinion'\r\n              label='Whats on your mind ?'\r\n              placeholder='type here..'\r\n                name='text'\r\n                onChange={this.changeHandler}\r\n            />\r\n          </Form.Group>\r\n          <Button type='submit' onClick={this.sendToApi} >Submit</Button>\r\n        </Form>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\nexport default WhatsOnYourMind\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport TwitMenu from './components/TwitMenu'\r\nimport TwitFeed from './components/TwitFeed'\r\nimport SignIn from './components/SignIn'\r\nimport SignUp from './components/SignUp'\r\nimport WhatsOnYourMind from './components/WhatsOnYourMind'\r\n\r\nimport {\r\n  Container,\r\n  Message,\r\n  Divider,\r\n  Dropdown,\r\n  Grid,\r\n  Header,\r\n  Image,\r\n  List,\r\n  Menu,\r\n  Segment,\r\n} from 'semantic-ui-react'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n// This site has 3 pages, all of which are rendered\r\n// dynamically in the browser (not server rendered).\r\n//\r\n// Although the page does not ever refresh, notice how\r\n// React Router keeps the URL up to date as you navigate\r\n// through the site. This preserves the browser history,\r\n// making sure things like the back button and bookmarks\r\n// work properly.\r\n\r\nexport default function BasicExample() {\r\n  return (\r\n    <Router>\r\n    <TwitMenu/>\r\n\r\n        {/*\r\n          A <Switch> looks through all its children <Route>\r\n          elements and renders the first one whose path\r\n          matches the current URL. Use a <Switch> any time\r\n          you have multiple routes, but you want only one\r\n          of them to render at a time\r\n        */}\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <PublicFeed />\r\n          </Route>\r\n          <Route path=\"/public\">\r\n            <PublicFeed />\r\n          </Route>\r\n          <Route path=\"/signin\">\r\n            <SignIn/>\r\n          </Route>\r\n          <Route path=\"/signup\">\r\n            <SignUp/>\r\n          </Route>\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\n// You can think of these components as \"pages\"\r\n// in your app.\r\n\r\n\r\n\r\n\r\nconst PublicFeed = () => (\r\n  <div>\r\n\r\n    <Container text style={{ marginTop: '7em' }}>\r\n      <WhatsOnYourMind/>\r\n      <Header as='h1'>Public Feed</Header>\r\n      <TwitFeed/>\r\n    </Container>\r\n\r\n  </div>\r\n)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}