{"version":3,"sources":["components/TwitMenu.js","components/Message.js","components/TwitFeed.js","components/SignIn.js","components/SignUp.js","components/WhatsOnYourMind.js","components/UserMessages.js","App.js","serviceWorker.js","index.js"],"names":["TwitMenu","Menu","fixed","inverted","Container","Item","as","Link","to","header","Message","alert","name","this","props","text","date","Feed","Event","Label","image","Content","Summary","href","Date","Extra","Meta","Like","Icon","onClick","reportMsg","React","Component","TwitFeed","handlePaginationChange","e","activePage","setState","fetchData","state","items","numberPages","pageNumber","fetch","then","res","json","result","console","log","isLoaded","messages","pageCount","page","error","size","map","item","key","message_id","toString","author_username","pub_date","Grid","Column","textAlign","Pagination","onPageChange","totalPages","style","marginBottom","Segment","Dimmer","active","height","Loader","Image","src","SignIn","changeHandler","event","nam","target","val","value","sendToApi","data","username","password","method","headers","body","JSON","stringify","status","history","push","errorMessage","verticalAlign","maxWidth","Header","color","Form","stacked","Input","fluid","icon","iconPosition","placeholder","onChange","type","Button","list","SignUp","errorMessageUser","email","successMessage","password2","success","content","WhatsOnYourMind","setTimeout","window","location","reload","catch","err","Group","widths","TextArea","id","label","UserMessages","onFollowClicked","bind","loaded","followError","followSuccess","pathname","substr","response","marginTop","labelPosition","basic","pointing","PublicFeed","Boolean","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ad6ddc5e.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Container,\r\n  Menu\r\n} from 'semantic-ui-react'\r\n\r\nexport default function TwitMenu() {\r\n    return (\r\n    <Menu fixed='top' inverted>\r\n      <Container>\r\n        <Menu.Item  as={Link} to=\"/\"  header>\r\n          MiniTwit\r\n        </Menu.Item>\r\n        <Menu.Item as={Link} to=\"/public\" >Public Timeline</Menu.Item>\r\n        <Menu.Item  as={Link} to=\"/signup\" >Sign Up</Menu.Item>\r\n        <Menu.Item  as={Link} to=\"/signin\" >Sign In</Menu.Item>\r\n\r\n      </Container>\r\n    </Menu>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Feed, Icon } from 'semantic-ui-react'\r\nclass Message extends React.Component {\r\n  reportMsg() {\r\n    alert(\"Do you want to report this message ?\")\r\n   \r\n  }\r\n  render (){\r\n    const name = this.props.name\r\n    const text = this.props.text\r\n    const date = this.props.date\r\n    return (\r\n      <Feed.Event>\r\n        <Feed.Label image='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n        <Feed.Content>\r\n          <Feed.Summary>\r\n            <a href={'/'+name}>{name}</a> posted on his page\r\n            <Feed.Date>{date}</Feed.Date>\r\n          </Feed.Summary>\r\n          <Feed.Extra text>\r\n            {text}\r\n          </Feed.Extra>\r\n          <Feed.Meta>\r\n            <Feed.Like>\r\n              <Icon name='flag' onClick={this.reportMsg}/>\r\n            </Feed.Like>\r\n          </Feed.Meta>\r\n        </Feed.Content>\r\n      </Feed.Event>\r\n\r\n    )\r\n  }\r\n\r\n}\r\nexport default Message\r\n","import React from 'react'\r\nimport { Feed, Segment, Dimmer, Image, Loader, Pagination, Grid } from 'semantic-ui-react'\r\nimport Message from './Message'\r\n\r\nclass TwitFeed extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      activePage: 1,\r\n      numberPages:1\r\n    };\r\n  }\r\n\r\n  fetchData(pageNumber) {\r\n    fetch(\"https://minitwit-api.herokuapp.com/public?p=\"+pageNumber)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(\"success fetching api\", result)\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: result.messages,\r\n            numberPages: result.pageCount,\r\n            activePage: result.page\r\n          });\r\n        },\r\n\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true\r\n          });\r\n            console.log(\"fail fetching api\", error)\r\n        }\r\n      )\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData(1);\r\n  }\r\n\r\n  handlePaginationChange = (e, { activePage }) => {\r\n    this.setState({ activePage });\r\n    this.fetchData(activePage);\r\n  }\r\n\r\n  render() {\r\n    const { isLoaded, items } = this.state;\r\n    return (\r\n      <div>\r\n      {\r\n        this.state.isLoaded ?\r\n        <div>\r\n          <Feed size=\"large\">\r\n              {\r\n                items.map(item => (\r\n                  <Message key={item.message_id.toString()}\r\n                  name={item.author_username}\r\n                  text={item.text}\r\n                  date={item.pub_date}\r\n                  />\r\n                ))\r\n              }\r\n          </Feed>\r\n\r\n          <Grid>\r\n            <Grid.Column textAlign=\"center\">\r\n            <Pagination\r\n              activePage={this.state.activePage}\r\n              onPageChange={this.handlePaginationChange}\r\n              totalPages={this.state.numberPages}\r\n              style={{ marginBottom: '2em'}}\r\n            />\r\n            </Grid.Column>\r\n          </Grid>\r\n        </div>\r\n        \r\n\r\n        : \r\n\r\n        <Segment>\r\n          <Dimmer active style={{ height: '15vh' }}>\r\n            <Loader size=\"big\" inverted>Loading</Loader>\r\n          </Dimmer>\r\n    \r\n          <Image src='/images/wireframe/short-paragraph.png' />\r\n        </Segment>\r\n      }\r\n      </div>\r\n\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default TwitFeed\r\n","import React from 'react'\r\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      errorMessage: false\r\n    };\r\n  }\r\n\r\n  changeHandler = (event) => {\r\n    let nam = event.target.name\r\n    let val = event.target.value\r\n    this.setState({[nam]: val})\r\n  }\r\n\r\n  sendToApi = () => {\r\n\r\n    const data = {username: this.state.username, password: this.state.password}\r\n    fetch('https://minitwit-api.herokuapp.com/login' , {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then((result) => {\r\n        if(result.status == 200){\r\n          this.props.history.push('/');\r\n        } else {\r\n          console.log('login failed');\r\n          this.setState({errorMessage: true})\r\n        }\r\n      })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as='h2' color='teal' textAlign='center'>\r\n            Log-in to your account\r\n          </Header>\r\n          <Form size='large'>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                fluid\r\n                icon='user'\r\n                iconPosition='left'\r\n                placeholder='Username'\r\n                name='username'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Password'\r\n                type='password'\r\n                name='password'\r\n                onChange={this.changeHandler}\r\n              />\r\n\r\n              <Button color='teal' fluid size='large' onClick={this.sendToApi} >\r\n                Login\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            New to us? <a href='/signup'>Sign Up</a>\r\n          </Message>\r\n          {\r\n          this.state.errorMessage ? \r\n          <Message\r\n            error\r\n            header='Sign in failed'\r\n            list={[\r\n              'Make sure you correctly entered your credentials',\r\n            ]}\r\n          />\r\n          : null\r\n        }\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\nexport default SignIn\r\n","import React from 'react'\r\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react'\r\n\r\nclass SignUp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      password2: '',\r\n      email: '',\r\n      errorMessage: false,\r\n      successMessage: false,\r\n      errorMessageUser: false\r\n    };\r\n  }\r\n\r\n  changeHandler = (event) => {\r\n    // https://www.w3schools.com/react/react_forms.asp\r\n    let nam = event.target.name\r\n    let val = event.target.value\r\n    this.setState({[nam]: val})\r\n  }\r\n\r\n  sendToApi = () => {\r\n    this.setState({\r\n      errorMessage: false,\r\n      errorMessageUser: false\r\n    })\r\n\r\n    const data = {username: this.state.username,\r\n               password: this.state.password,\r\n               email: this.state.email}\r\n    \r\n      if(data.username && data.password && data.email){\r\n        fetch('https://minitwit-api.herokuapp.com/register' , {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Content-type': 'application/json'\r\n          },\r\n          body: JSON.stringify(data)\r\n        })\r\n          .then((result) => {\r\n            if(result.status == 200){\r\n              console.log('Sign up success')\r\n              this.setState({successMessage: true})\r\n            } else if(result.status == 409){\r\n              console.log('Username exists')\r\n              this.setState({errorMessageUser: true})\r\n            } else {\r\n              this.setState({errorMessage: true})\r\n              console.log('Sign up error')\r\n            }\r\n          });\r\n      } else {\r\n        this.setState({errorMessage: true})\r\n      }\r\n      \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Header as='h2' color='teal' textAlign='center'>\r\n            Sign up\r\n          </Header>\r\n          <Form size='large'>\r\n            <Segment stacked>\r\n              <Form.Input\r\n                fluid\r\n                icon='user'\r\n                iconPosition='left'\r\n                placeholder='Username'\r\n                name='username'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='user'\r\n                iconPosition='left'\r\n                placeholder='E-mail address'\r\n                name='email'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Password'\r\n                type='password'\r\n                name='password'\r\n                onChange={this.changeHandler}\r\n              />\r\n              <Form.Input\r\n                fluid\r\n                icon='lock'\r\n                iconPosition='left'\r\n                placeholder='Repeat password'\r\n                type='password'\r\n                name='password2'\r\n                onChange={this.changeHandler}\r\n              />\r\n\r\n              <Button color='teal' fluid size='large' onClick={this.sendToApi} >\r\n                Sign Up\r\n              </Button>\r\n            </Segment>\r\n          </Form>\r\n          <Message>\r\n            Already a member? <a href='/signin'>Sign In</a>\r\n          </Message>\r\n          {\r\n            this.state.successMessage ? \r\n            <Message\r\n              success\r\n              header='Your user registration was successful'\r\n              content='You may now log-in with the username you have chosen.'\r\n            />\r\n\r\n            : null\r\n          }\r\n          {\r\n            this.state.errorMessage ? \r\n            <Message\r\n              error\r\n              header='Sign up failed'\r\n              list={[\r\n                'Make sure you entered a valid email address',\r\n                'Make sure you entered correctly the passwords',\r\n              ]}\r\n            />\r\n            : null\r\n          }\r\n          {\r\n            this.state.errorMessageUser ? \r\n            <Message\r\n              error\r\n              header='Sign up failed'\r\n              list={[\r\n                'Username already exists. Please choose another one',\r\n              ]}\r\n            />\r\n            : null\r\n          }\r\n        </Grid.Column>\r\n\r\n        \r\n      </Grid>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default SignUp\r\n","import React from 'react'\r\nimport { Button, Form, Message, Segment } from 'semantic-ui-react'\r\n\r\nclass WhatsOnYourMind extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      successMessage: false\r\n    };\r\n  }\r\n\r\n  changeHandler = (event) => {\r\n    let nam = event.target.name\r\n    let val = event.target.value\r\n    this.setState({[nam]: val})\r\n  }\r\n\r\n  sendToApi = () => {\r\n    let data ={text: this.state.text}\r\n    fetch('https://minitwit-api.herokuapp.com/add_message' , {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then((result) => {\r\n        if(result.status == 200){\r\n          this.setState({successMessage: true})\r\n          setTimeout(() => {\r\n            this.setState({successMessage: false})\r\n            window.location.reload();\r\n          }, 3500);\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Segment >\r\n        <Form >\r\n          <Form.Group widths='equal'>\r\n            <Form.TextArea\r\n              id='form-textarea-control-opinion'\r\n              label='Whats on your mind ?'\r\n              placeholder='type here..'\r\n                name='text'\r\n                onChange={this.changeHandler}\r\n            />\r\n          </Form.Group>\r\n          <Button type='submit' onClick={this.sendToApi} >Submit</Button>\r\n        </Form>\r\n        {\r\n            this.state.successMessage ? \r\n            <Message\r\n              success\r\n              header='Hooray!'\r\n              content='Your message is now available to your followers'\r\n            />\r\n\r\n            : null\r\n          }\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\nexport default WhatsOnYourMind\r\n","import React from 'react'\r\nimport { Feed, Container, Header, Segment, Dimmer, Loader, Image, Button, Icon, Label, Message as MessageAlert } from 'semantic-ui-react'\r\nimport Message from './Message'\r\n\r\nexport default class UserMessages extends React.Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props)\r\n\r\n    this.onFollowClicked = this.onFollowClicked.bind(this);\r\n\r\n    this.state = {\r\n        items: [],\r\n        loaded: false,\r\n        followError: false,\r\n        followSuccess: false,\r\n        username: this.props.location.pathname.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    fetch(\"https://minitwit-api.herokuapp.com/\"+this.state.username)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(\"success fetching api\")\r\n          this.setState({\r\n            items: result.response,\r\n            loaded: true\r\n          });\r\n        },\r\n\r\n        (error) => {\r\n          this.setState({\r\n            error\r\n          });\r\n            console.log(\"fail fetching api\")\r\n        }\r\n      )\r\n  }\r\n\r\n  onFollowClicked() {\r\n\r\n    fetch('https://minitwit-api.herokuapp.com/'+ this.state.username +'/follow')\r\n    .then( result => {\r\n      console.log('success', result);\r\n      if(result.status == 200){\r\n        this.setState({followSuccess: true});\r\n        setTimeout(() => {\r\n          this.setState({followSuccess: false})\r\n        }, 3500);\r\n      } else {\r\n        console.log('error');\r\n        this.setState({followError: true})\r\n      }\r\n    })\r\n    .catch(err => this.setState({followError: true}))\r\n  }\r\n\r\n  render(){\r\n    const { items } = this.state;\r\n      return(\r\n\r\n        <div>\r\n\r\n        {\r\n          this.state.loaded ?\r\n        <Container text style={{ marginTop: '7em' }}>\r\n            <Header as='h1'>{this.state.username}'s feed</Header>\r\n            <Button as='div' labelPosition='right' onClick={this.onFollowClicked}>\r\n              <Button basic color='blue'>\r\n                <Icon name='user plus' />\r\n                Follow\r\n              </Button>\r\n              <Label as='a' basic color='blue' pointing='left'>\r\n                +1\r\n              </Label>\r\n            </Button>\r\n\r\n            {\r\n          this.state.followError ? \r\n            <MessageAlert\r\n              error\r\n              header='Follow failed'\r\n              list={[\r\n                'An unexpected error has occured. Please try again later.',\r\n              ]}\r\n            />\r\n            : null\r\n        }\r\n\r\n        {\r\n          this.state.followSuccess ?\r\n            <MessageAlert\r\n              success\r\n              header='Follow successful'\r\n              content='You are now following the user.'\r\n            />\r\n\r\n            :null\r\n        }\r\n            <Feed size=\"large\">\r\n                {\r\n                items.map(item => (\r\n                    <Message key={item.message_id.toString()}\r\n                    name={this.username}\r\n                    text={item.text}\r\n                    date={item.pub_date}\r\n                    />\r\n                ))\r\n                }\r\n            </Feed>\r\n        </Container>\r\n  \r\n          : \r\n  \r\n          <Segment>\r\n            <Dimmer active style={{ height: '15vh', marginTop: '7em' }}>\r\n              <Loader size=\"big\" inverted>Loading</Loader>\r\n            </Dimmer>\r\n      \r\n            <Image src='/images/wireframe/short-paragraph.png' />\r\n          </Segment>\r\n        }\r\n        </div>\r\n      )\r\n  }\r\n\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport TwitMenu from './components/TwitMenu'\r\nimport TwitFeed from './components/TwitFeed'\r\nimport SignIn from './components/SignIn'\r\nimport SignUp from './components/SignUp'\r\nimport WhatsOnYourMind from './components/WhatsOnYourMind'\r\nimport UserMessages from './components/UserMessages'\r\n\r\nimport {\r\n  Container,\r\n  Header\r\n} from 'semantic-ui-react'\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n// This site has 3 pages, all of which are rendered\r\n// dynamically in the browser (not server rendered).\r\n//\r\n// Although the page does not ever refresh, notice how\r\n// React Router keeps the URL up to date as you navigate\r\n// through the site. This preserves the browser history,\r\n// making sure things like the back button and bookmarks\r\n// work properly.\r\n\r\nexport default function BasicExample() {\r\n  return (\r\n    <Router>\r\n    <TwitMenu/>\r\n\r\n        {/*\r\n          A <Switch> looks through all its children <Route>\r\n          elements and renders the first one whose path\r\n          matches the current URL. Use a <Switch> any time\r\n          you have multiple routes, but you want only one\r\n          of them to render at a time\r\n        */}\r\n        <Switch>\r\n          <Route exact path=\"/\" component={PublicFeed}>\r\n          </Route>\r\n          <Route path=\"/public\" component={PublicFeed}>\r\n          </Route>\r\n          <Route path=\"/signin\" component={SignIn}>\r\n          </Route>\r\n          <Route path=\"/signup\" component={SignUp}>\r\n          </Route>\r\n          <Route path=\"/:user\" component={UserMessages}></Route>\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\n// You can think of these components as \"pages\"\r\n// in your app.\r\n\r\n\r\n\r\n\r\nconst PublicFeed = () => (\r\n  <div>\r\n\r\n    <Container text style={{ marginTop: '7em' }}>\r\n      <WhatsOnYourMind/>\r\n      <Header as='h1'>Public Feed</Header>\r\n      <TwitFeed/>\r\n    </Container>\r\n\r\n  </div>\r\n)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}